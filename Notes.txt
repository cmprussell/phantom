RadCoolTest_v1:
-- galcen setup
-- cooling values chosen such that only one hydro timestep should occur per output time
-- various output durations (varying dtmax) so that cooling to the floor temperature is done over a varying number of steps
-- cooling not corrected, so this is the original exact_cooling subroutine that has the error of not finding the new k (i.e. has the error of not finding k')

RadCoolTest_v1b
-- same as RadCoolTest_v1 with with the cooling error fixed (i.e. finds the new k')

Test code: for me, this didn't work.  What did work was splitting the commands into two, which is presented as an alternative method in the Phantom docs.
make SYSTEM=ifort test

Test code: this did work
0. go to the correct firectory
<cd to /phantom/ top-level directory>
1. compile the test suite
make SYSTEM=ifort SETUP=test phantomtest
2. run the test suite in a slurm job
sbatch threads_TestSuite.qs

Run bots for code formatting -- this way the bot doens't fix the spacing/alignment/etc of your code, thereby removing you as the author in "blame"
0. add "findent" to the path; go to the scripts directory
export PATH="$PATH:/home/1024/findent-4.3.3/bin/bin"
cd scripts/
1. run the bot, capturing the output in a file
./bots.sh > output_v2b_bots.sh.txt

Pulling in changes from Daniel's upstream/master branch into my version, specifically to my branch main
1. git fetch upstream master
2. git chechout main -- not necessary if already on my branch named main
3. git merge upstream/master
4. use vi to fix merge issues.  Here is a sample output of step 3, which shows files that merged correctly and ones that we need me to manually fix.
   [(phys:crussell)@login01.caviness phantom]$ git merge upstream/master
   Auto-merging src/main/utils_gr.f90
   Auto-merging src/main/units.f90
   Auto-merging src/main/substepping.F90
   CONFLICT (content): Merge conflict in src/main/substepping.F90
   Auto-merging src/main/readwrite_infile.F90
   Auto-merging src/main/readwrite_dumps_fortran.f90
   Auto-merging src/main/ptmass.F90
   Auto-merging src/main/porosity.f90
   Auto-merging src/main/part.F90
   Auto-merging src/main/metric_tools.f90
   Auto-merging src/main/inject_galcen_winds.f90
   Removing src/main/inject_asteroidwind.f90
   Auto-merging src/main/initial.F90
   CONFLICT (content): Merge conflict in src/main/initial.F90
   Auto-merging src/main/evolve.F90
   Auto-merging src/main/cooling_solver.f90
   Auto-merging src/main/cons2prim.f90
   Auto-merging build/Makefile_setups
   Auto-merging build/Makefile
   Auto-merging .gitignore
   Automatic merge failed; fix conflicts and then commit the result.
In this instance, I use vi to fix the issues in substepping.F90 and initial.f90
5. test the compilation status of the new changes
6. Do the git add, git commit, git push sequence so these changes are stored for my copy of the code

Make a new directory and compile the code
../../scripts/writemake.sh galcen > Makefile
make SYSTEM=ifort
make SYSTEM=ifort setup

make a new branch with the current branch's code; here, the new branch is named "multiAbu"
1a. git checkout -b multiAbu
make a new branch with a non-current branch's code; here, the new branch is named "branchNew" and the old/copied branch is "branchOld"
1b. git checkout -b branchNew branchOld
make the newly created branch tacked in your github local respository; here, the new branch is named "multiAbu"
2. git push origin multiAbu

Undo the very last thing done to a particular branch, which in this case was merging a pull request
1. git reset --hard HEAD~1
Update the branch so the remote repository has the undone changes -- note: since "-f" means force, this comes with a warning to only do this if you are sure this should be done (perhaps there is a better way I'll find in the future)
2. git push -f

Investigate changes among branches (here between branch main and branch multiAbu): list changed files only
1a. git diff --name-only main multiAbu
Investigate changes among branches (here between branch main and branch multiAbu): investighate changes within each file
1b. git diff main multiAbu


Pull in changes to a specific non-main branch once a pull request has updated a non-main branch (in this case, branch multiAbu)
1. git pull origin multiAbu


Pull in changes to a specific non-main branch once a pull request has updated the main branch (in this case, branch multiAbu is the one to be updated from main)
1. git checkout multiAbu
2. git pull origin main
[(phys:crussell)@login01.caviness phantom]$ git status
# On branch multiAbu
# Your branch is ahead of 'origin/multiAbu' by 3 commits.
#   (use "git push" to publish your local commits)
#
nothing to commit, working directory clean
3. git push












Note from pull request #11, which had merge conflicts:

Note: I tried this #10 first, but it seemed like I was going to modify main, which is not what I wanted to do. I wanted to changes from main (via reuseParticles and initInject) to be a part of multiAbu; I didn't want to change main. I thought that this might have had something to do with main being the default branch, so I made main2, which is an identical branch to main, and then tried this pull request again (that is #10, this is #11). The same thing happened, however; the CLI method for merging (and the non-CLI method) seemed like I was modifying main2.

What follows is what ended up working for me to properly bring the changes from main into multiAbu.

Create main2 (which I didn't actually need to do):

[(phys:crussell)@login00.caviness phantom]$ git checkout main
[(phys:crussell)@login00.caviness phantom]$ git checkout -b main2
Switched to a new branch 'main2'
[(phys:crussell)@login00.caviness phantom]$ git branch
  afterFullSimRun
  firstFullSimRun
  forpullrequests
  initInject
  main
* main2
  mainRedo
  multiAbu
  reuseParticles
  reuseParticles2
[(phys:crussell)@login00.caviness phantom]$ git push origin main2
Total 0 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for 'main2' on GitHub by visiting:
remote:      https://github.com/cmprussell/phantom/pull/new/main2
remote: 
remote: To https://github.com/cmprussell/phantom.git
 * [new branch]      main2 -> main2
[(phys:crussell)@login00.caviness phantom]$ 
Now that main2 is created, here is how I solved the merge/only-update-multiAbu issue:

[(phys:crussell)@login00.caviness phantom]$ git checkout multiAbu 
Switched to branch 'multiAbu'
[(phys:crussell)@login00.caviness phantom]$ git merge main2
Auto-merging src/setup/setup_galcen_stars.f90
CONFLICT (content): Merge conflict in src/setup/setup_galcen_stars.f90
Auto-merging src/main/readwrite_infile.F90
CONFLICT (content): Merge conflict in src/main/readwrite_infile.F90
Auto-merging src/main/readwrite_dumps_fortran.f90
Auto-merging src/main/readwrite_dumps_common.f90
CONFLICT (content): Merge conflict in src/main/readwrite_dumps_common.f90
Auto-merging src/main/inject_galcen_winds.f90
CONFLICT (content): Merge conflict in src/main/inject_galcen_winds.f90
Auto-merging src/main/eos.f90
CONFLICT (content): Merge conflict in src/main/eos.f90
Auto-merging .gitignore
CONFLICT (content): Merge conflict in .gitignore
Automatic merge failed; fix conflicts and then commit the result.
[(phys:crussell)@login00.caviness phantom]$ git branch
  afterFullSimRun
  firstFullSimRun
  forpullrequests
  initInject
  main
  main2
  mainRedo
* multiAbu
  reuseParticles
  reuseParticles2
[(phys:crussell)@login00.caviness phantom]$ git status
# On branch multiAbu
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#       modified:   src/main/evolve.F90
#       modified:   src/main/initial.F90
#       modified:   src/main/options.f90
#       modified:   src/main/readwrite_dumps_fortran.f90
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#       both modified:      .gitignore
#       both modified:      src/main/eos.f90
#       both modified:      src/main/inject_galcen_winds.f90
#       both modified:      src/main/readwrite_dumps_common.f90
#       both modified:      src/main/readwrite_infile.F90
#       both modified:      src/setup/setup_galcen_stars.f90
#
[(phys:crussell)@login00.caviness phantom]$ vi src/setup/setup_galcen_stars.f90
[(phys:crussell)@login00.caviness phantom]$ vi src/main/readwrite_infile.F90
[(phys:crussell)@login00.caviness phantom]$ vi src/main/readwrite_dumps_common.f90
[(phys:crussell)@login00.caviness phantom]$ vi src/main/inject_galcen_winds.f90
[(phys:crussell)@login00.caviness phantom]$ vi src/main/eos.f90
[(phys:crussell)@login00.caviness phantom]$ vi .gitignore 
These vi commands are fixing the merge issues with the files.

Now I make the commit and push the changes.

[(phys:crussell)@login00.caviness phantom]$ git status
# On branch multiAbu
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#       modified:   src/main/evolve.F90
#       modified:   src/main/initial.F90
#       modified:   src/main/options.f90
#       modified:   src/main/readwrite_dumps_fortran.f90
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#       both modified:      .gitignore
#       both modified:      src/main/eos.f90
#       both modified:      src/main/inject_galcen_winds.f90
#       both modified:      src/main/readwrite_dumps_common.f90
#       both modified:      src/main/readwrite_infile.F90
#       both modified:      src/setup/setup_galcen_stars.f90
#
[(phys:crussell)@login00.caviness phantom]$ git add .
[(phys:crussell)@login00.caviness phantom]$ git status
# On branch multiAbu
# All conflicts fixed but you are still merging.
#   (use "git commit" to conclude merge)
#
# Changes to be committed:
#
#       modified:   .gitignore
#       modified:   src/main/evolve.F90
#       modified:   src/main/initial.F90
#       modified:   src/main/inject_galcen_winds.f90
#       modified:   src/main/options.f90
#       modified:   src/main/readwrite_dumps_common.f90
#       modified:   src/main/readwrite_dumps_fortran.f90
#       modified:   src/main/readwrite_infile.F90
#       modified:   src/setup/setup_galcen_stars.f90
#
[(phys:crussell)@login00.caviness phantom]$ git commit -m "pulled in changes from main (or main2, which is the same thing), which is updates via reuseParticles and initInject; fixed merge conflicts via command line"
[multiAbu 3358437] pulled in changes from main (or main2, which is the same thing), which is updates via reuseParticles and initInject; fixed merge conflicts via command line
[(phys:crussell)@login00.caviness phantom]$ git push
warning: push.default is unset; its implicit value is changing in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Counting objects: 28, done.
Delta compression using up to 36 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (10/10), 2.08 KiB | 0 bytes/s, done.
Total 10 (delta 8), reused 0 (delta 0)
remote: Resolving deltas: 100% (8/8), completed with 8 local objects.
remote: To https://github.com/cmprussell/phantom.git
   190992b..3358437  multiAbu -> multiAbu
[(phys:crussell)@login00.caviness phantom]$ 

git reset --hard 8b18a3a && git push origin main --force
